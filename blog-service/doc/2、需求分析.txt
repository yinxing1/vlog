
个人博客系统 - 软件需求规格说明书 (V1.0)
1. 引言 (Introduction)
   随着个人品牌和知识分享的需求日益增长，越来越多的技术人员、作家和生活记录者希望拥有一个自主可控、功能强大且界面美观的个人博客平台。本项目旨在开发一个基于现代化技术栈（Spring Boot + Vue）的个人博客系统，用于发布文章、分享知识、记录想法和与读者互动。
   ● 核心目标: 构建一个稳定、高效、易于维护和扩展的个人博客系统。
   ● 技术目标: 采用前后端分离架构，前端使用 Vue，后端使用 Spring Boot，数据库采用 MySQL 8，持久层框架使用 MyBatis。
   ● 用户目标:
   ○ 为 博主（管理员） 提供一个简洁、高效的内容管理后台。
   ○ 为 访客（读者） 提供一个加载快速、阅读舒适、易于导航的前台界面。
   本需求规格说明书旨在详细描述个人博客系统的功能性需求和非功能性需求，作为项目后续设计、开发、测试和验收的唯一依据。本文档的读者包括项目开发者（我们双方）、测试人员和最终用户（您）。
   ● 文章 (Article): 博主发布的核心内容，包含标题、摘要、正文、封面图等。
   ● 分类 (Category): 文章的组织方式，一篇文章只能属于一个分类。例如：“技术分享”、“生活随笔”。
   ● 标签 (Tag): 文章的关键词，用于更细粒度地描述文章内容，一篇文章可以有多个标签。例如：“Java”、“Spring Boot”、“旅行”。
   ● 评论 (Comment): 访客对文章的反馈或留言。
   ● 后台 (Backend/Admin): 仅供博主使用的管理界面，用于管理系统所有内容。
   ● 前台 (Frontend/View): 面向所有访客的公开展示界面。

2. 项目范围 (Project Scope)
   ● 后台管理功能:
   ○ 安全的管理员登录与退出机制。
   ○ 仪表盘（Dashboard）展示核心数据统计。
   ○ 文章管理：支持文章的创建、编辑、发布、存为草稿、删除。
   ○ 分类管理：支持分类的增、删、改、查。
   ○ 标签管理：支持标签的增、删、改、查。
   ○ 评论管理：支持查看、审核、删除、回复评论。
   ○ 系统设置：支持修改博客名称、签名、页脚信息等。
   ● 前台展示功能:
   ○ 首页：以列表形式分页展示已发布的文章。
   ○ 文章详情页：展示文章完整内容、发布信息、分类、标签及评论区。
   ○ 文章归档页：按月份或年份对文章进行归档展示。
   ○ 分类/标签页：展示特定分类或标签下的所有文章列表。
   ○ “关于我”页面：一个静态页面，用于展示博主个人介绍。
   ○ 文章搜索功能。
   ○ 访客评论功能。
   为保证项目V1.0的简洁和核心目标的达成，以下功能暂不包含在此次开发范围内，可在未来版本中迭代：
   ● 多用户/多作者支持。
   ● 访客注册与登录系统（评论采用匿名+昵称/邮箱模式）。
   ● 复杂的主题切换或定制功能。
   ● 邮件订阅与通知服务。
   ● 集成第三方登录（如GitHub, Google）。
   ● 在线图库/文件管理系统。

3. 用户角色与特征 (User Roles & Characteristics)
   本项目包含两种核心用户角色：
   ● 描述: 博客系统的唯一所有者和内容创作者。
   ● 特征: 具备基本的计算机操作能力，是系统的核心使用者。
   ● 核心需求:
   ○ 能够轻松地发布和管理自己的文章。
   ○ 能够方便地管理网站的分类、标签和访客评论。
   ○ 能够对网站的基本信息进行个性化配置。
   ○ 关心网站的访问数据，如文章浏览量。
   ● 描述: 博客内容的消费者和互动者。
   ● 特征: 任何通过互联网访问博客地址的用户。
   ● 核心需求:
   ○ 能够快速、清晰地阅读文章。
   ○ 能够通过分类、标签或搜索快速找到感兴趣的内容。
   ○ 能够发表自己的看法（评论）并与其他读者互动。
   ○ 希望在不同设备（PC、平板、手机）上都有良好的阅读体验。

4. 功能性需求 (Functional Requirements)
   ● FR-1.1: 系统必须提供一个安全的登录页面，管理员需凭用户名和密码登录。
   ● FR-1.2: 密码在数据库中必须经过加密存储（例如使用BCrypt）。
   ● FR-1.3: 登录成功后，系统应生成会话或Token，用于后续操作的身份验证。
   ● FR-1.4: 后台所有管理接口都必须进行权限校验，未登录用户无法访问。
   ● FR-1.5: 管理员可以安全退出登录。
   ● FR-2.1: 管理员可以创建新文章，编辑器应支持 Markdown 语法。
   ● FR-2.2: 创建/编辑文章时，可填写标题、正文、自定义摘要、选择分类、关联多个标签、上传/设置封面图。
   ● FR-2.3: 文章可以被设置为“发布”或“草稿”状态。只有“发布”状态的文章才对访客可见。
   ● FR-2.4: 管理员可以在后台以列表形式查看所有文章（包括草稿），并支持按标题、状态进行筛选和分页。
   ● FR-2.5: 管理员可以删除文章。删除前应有确认提示。
   ● FR-3.1: 管理员可以对分类进行增、删、改、查操作。
   ● FR-3.2: 管理员可以对标签进行增、删、改、查操作。
   ● FR-3.3: 删除分类或标签时，应有提示告知其关联的文章数量。
   ● FR-4.1: 访客可以在文章详情页提交评论，需填写昵称、邮箱（非强制）和评论内容。
   ● FR-4.2: 评论提交后，默认状态为“待审核”，需管理员在后台审核通过后才在前台显示。
   ● FR-4.3: 管理员可以在后台查看所有评论，并进行“通过”、“删除”操作。
   ● FR-4.4: (可选，建议加入) 支持两级评论，即访客可以回复某条已通过的评论。
   ● FR-5.1: 首页应分页显示已发布的文章列表，每项包含标题、摘要、发布日期、分类、浏览次数等。
   ● FR-5.2: 点击文章标题可进入文章详情页，展示Markdown渲染后的完整内容、评论列表和评论框。
   ● FR-5.3: 每篇文章的浏览次数（PV）应被记录和展示。
   ● FR-5.4: 提供独立的分类页和标签页，点击后展示该分类/标签下的文章列表。
   ● FR-5.5: 提供全局搜索框，可根据关键词在文章标题和内容中进行搜索。

5. 非功能性需求 (Non-Functional Requirements)
   ● NFR-1.1: 正常网络条件下，前台页面首次加载时间应在3秒以内。
   ● NFR-1.2: 后端API接口的平均响应时间应在200毫秒以内。
   ● NFR-1.3: 系统应能承受至少50个并发用户的访问。
   ● NFR-2.1: 防止SQL注入攻击（MyBatis可有效防御）。
   ● NFR-2.2: 对用户输入（特别是评论内容）进行处理，防止XSS（跨站脚本）攻击。
   ● NFR-2.3: 防止CSRF（跨站请求伪造）攻击，特别是在后台表单提交时。
   ● NFR-2.4: 重要的配置信息和密码不应硬编码在代码中。
   ● NFR-3.1: 前台界面必须是响应式设计，能良好地适配PC、平板和手机屏幕。
   ● NFR-3.2: 后台管理界面布局清晰，操作直观，有明确的操作提示。
   ● NFR-3.3: 系统应保证7x24小时不间断运行（依赖于服务器部署）。
   ● NFR-4.1: 代码应遵循统一的编码规范，结构清晰，注释充分。
   ● NFR-4.2: 前后端分离，接口定义清晰，便于独立开发和维护。
   ● NFR-4.3: 关键业务逻辑应有日志记录，便于问题排查。

6. 约束与假设 (Constraints & Assumptions)
   ● 技术约束: 项目必须使用 Spring Boot, Vue, MyBatis, MySQL 8 技术栈。
   ● 部署约束: 假定最终用户（您）拥有可以部署Java应用、Vue应用和MySQL数据库的服务器环境。
   ● 内容假设: 博客的所有内容（文章、图片等）由管理员自行提供和负责。
   ● 用户假设: 系统管理员为单用户，不考虑多管理员同时操作的冲突问题。

